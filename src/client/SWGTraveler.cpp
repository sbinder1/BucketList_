/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGTraveler.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGTraveler::SWGTraveler(QString* json) {
    init();
    this->fromJson(*json);
}

SWGTraveler::SWGTraveler() {
    init();
}

SWGTraveler::~SWGTraveler() {
    this->cleanup();
}

void
SWGTraveler::init() {
    id = new QString("");
last_name = new QString("");
first_name = new QString("");
traveler_type = new QString("");
infant = new SWGInfant();
date_of_birth = NULL;
contacts = new QList<SWGContact*>();
frequent_traveler_cards = new QList<SWGFrequentTravelerCard*>();
}

void
SWGTraveler::cleanup() {
    if(id != NULL) {
        delete id;
    }
if(last_name != NULL) {
        delete last_name;
    }
if(first_name != NULL) {
        delete first_name;
    }
if(traveler_type != NULL) {
        delete traveler_type;
    }
if(infant != NULL) {
        delete infant;
    }
if(date_of_birth != NULL) {
        delete date_of_birth;
    }
if(contacts != NULL) {
        QList<SWGContact*>* arr = contacts;
        foreach(SWGContact* o, *arr) {
            delete o;
        }
        delete contacts;
    }
if(frequent_traveler_cards != NULL) {
        QList<SWGFrequentTravelerCard*>* arr = frequent_traveler_cards;
        foreach(SWGFrequentTravelerCard* o, *arr) {
            delete o;
        }
        delete frequent_traveler_cards;
    }
}

SWGTraveler*
SWGTraveler::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTraveler::fromJsonObject(QJsonObject &pJson) {
    setValue(&id, pJson["id"], "QString", "QString");
setValue(&last_name, pJson["last_name"], "QString", "QString");
setValue(&first_name, pJson["first_name"], "QString", "QString");
setValue(&traveler_type, pJson["traveler_type"], "QString", "QString");
setValue(&infant, pJson["infant"], "SWGInfant", "SWGInfant");
setValue(&date_of_birth, pJson["date_of_birth"], "QDate", "QDate");
setValue(&contacts, pJson["contacts"], "QList", "SWGContact");
setValue(&frequent_traveler_cards, pJson["frequent_traveler_cards"], "QList", "SWGFrequentTravelerCard");
}

QString
SWGTraveler::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGTraveler::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("id"), id, obj, QString("QString"));
    
        

    
    toJsonValue(QString("last_name"), last_name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("first_name"), first_name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("traveler_type"), traveler_type, obj, QString("QString"));
    
        

    
    toJsonValue(QString("infant"), infant, obj, QString("SWGInfant"));
    
        

    
    toJsonValue(QString("date_of_birth"), date_of_birth, obj, QString("QDate"));
    
        

    
    QList<SWGContact*>* contactsList = contacts;
    QJsonArray contactsJsonArray;
    toJsonArray((QList<void*>*)contacts, &contactsJsonArray, "contacts", "SWGContact");

    obj->insert("contacts", contactsJsonArray);
    

    
    QList<SWGFrequentTravelerCard*>* frequent_traveler_cardsList = frequent_traveler_cards;
    QJsonArray frequent_traveler_cardsJsonArray;
    toJsonArray((QList<void*>*)frequent_traveler_cards, &frequent_traveler_cardsJsonArray, "frequent_traveler_cards", "SWGFrequentTravelerCard");

    obj->insert("frequent_traveler_cards", frequent_traveler_cardsJsonArray);
    

    return obj;
}

QString*
SWGTraveler::getId() {
    return id;
}
void
SWGTraveler::setId(QString* id) {
    this->id = id;
}

QString*
SWGTraveler::getLastName() {
    return last_name;
}
void
SWGTraveler::setLastName(QString* last_name) {
    this->last_name = last_name;
}

QString*
SWGTraveler::getFirstName() {
    return first_name;
}
void
SWGTraveler::setFirstName(QString* first_name) {
    this->first_name = first_name;
}

QString*
SWGTraveler::getTravelerType() {
    return traveler_type;
}
void
SWGTraveler::setTravelerType(QString* traveler_type) {
    this->traveler_type = traveler_type;
}

SWGInfant*
SWGTraveler::getInfant() {
    return infant;
}
void
SWGTraveler::setInfant(SWGInfant* infant) {
    this->infant = infant;
}

QDate*
SWGTraveler::getDateOfBirth() {
    return date_of_birth;
}
void
SWGTraveler::setDateOfBirth(QDate* date_of_birth) {
    this->date_of_birth = date_of_birth;
}

QList<SWGContact*>*
SWGTraveler::getContacts() {
    return contacts;
}
void
SWGTraveler::setContacts(QList<SWGContact*>* contacts) {
    this->contacts = contacts;
}

QList<SWGFrequentTravelerCard*>*
SWGTraveler::getFrequentTravelerCards() {
    return frequent_traveler_cards;
}
void
SWGTraveler::setFrequentTravelerCards(QList<SWGFrequentTravelerCard*>* frequent_traveler_cards) {
    this->frequent_traveler_cards = frequent_traveler_cards;
}



} /* namespace Swagger */

