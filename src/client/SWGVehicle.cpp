/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGVehicle.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGVehicle::SWGVehicle(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVehicle::SWGVehicle() {
    init();
}

SWGVehicle::~SWGVehicle() {
    this->cleanup();
}

void
SWGVehicle::init() {
    vehicle_info = new SWGVehicleInfo();
rates = new QList<SWGRate*>();
estimated_total = new SWGAmount();
images = new QList<SWGImage*>();
}

void
SWGVehicle::cleanup() {
    if(vehicle_info != NULL) {
        delete vehicle_info;
    }
if(rates != NULL) {
        QList<SWGRate*>* arr = rates;
        foreach(SWGRate* o, *arr) {
            delete o;
        }
        delete rates;
    }
if(estimated_total != NULL) {
        delete estimated_total;
    }
if(images != NULL) {
        QList<SWGImage*>* arr = images;
        foreach(SWGImage* o, *arr) {
            delete o;
        }
        delete images;
    }
}

SWGVehicle*
SWGVehicle::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVehicle::fromJsonObject(QJsonObject &pJson) {
    setValue(&vehicle_info, pJson["vehicle_info"], "SWGVehicleInfo", "SWGVehicleInfo");
setValue(&rates, pJson["rates"], "QList", "SWGRate");
setValue(&estimated_total, pJson["estimated_total"], "SWGAmount", "SWGAmount");
setValue(&images, pJson["images"], "QList", "SWGImage");
}

QString
SWGVehicle::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVehicle::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("vehicle_info"), vehicle_info, obj, QString("SWGVehicleInfo"));
    
        

    
    QList<SWGRate*>* ratesList = rates;
    QJsonArray ratesJsonArray;
    toJsonArray((QList<void*>*)rates, &ratesJsonArray, "rates", "SWGRate");

    obj->insert("rates", ratesJsonArray);
    

    
    toJsonValue(QString("estimated_total"), estimated_total, obj, QString("SWGAmount"));
    
        

    
    QList<SWGImage*>* imagesList = images;
    QJsonArray imagesJsonArray;
    toJsonArray((QList<void*>*)images, &imagesJsonArray, "images", "SWGImage");

    obj->insert("images", imagesJsonArray);
    

    return obj;
}

SWGVehicleInfo*
SWGVehicle::getVehicleInfo() {
    return vehicle_info;
}
void
SWGVehicle::setVehicleInfo(SWGVehicleInfo* vehicle_info) {
    this->vehicle_info = vehicle_info;
}

QList<SWGRate*>*
SWGVehicle::getRates() {
    return rates;
}
void
SWGVehicle::setRates(QList<SWGRate*>* rates) {
    this->rates = rates;
}

SWGAmount*
SWGVehicle::getEstimatedTotal() {
    return estimated_total;
}
void
SWGVehicle::setEstimatedTotal(SWGAmount* estimated_total) {
    this->estimated_total = estimated_total;
}

QList<SWGImage*>*
SWGVehicle::getImages() {
    return images;
}
void
SWGVehicle::setImages(QList<SWGImage*>* images) {
    this->images = images;
}



} /* namespace Swagger */

