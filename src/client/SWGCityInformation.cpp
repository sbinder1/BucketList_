/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGCityInformation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGCityInformation::SWGCityInformation(QString* json) {
    init();
    this->fromJson(*json);
}

SWGCityInformation::SWGCityInformation() {
    init();
}

SWGCityInformation::~SWGCityInformation() {
    this->cleanup();
}

void
SWGCityInformation::init() {
    code = new QString("");
geonames_ID = new QString("");
name = new QString("");
state = new QString("");
country = new QString("");
location = new SWGGeolocation();
timezone = new QString("");
currency = new QString("");
}

void
SWGCityInformation::cleanup() {
    if(code != NULL) {
        delete code;
    }
if(geonames_ID != NULL) {
        delete geonames_ID;
    }
if(name != NULL) {
        delete name;
    }
if(state != NULL) {
        delete state;
    }
if(country != NULL) {
        delete country;
    }
if(location != NULL) {
        delete location;
    }
if(timezone != NULL) {
        delete timezone;
    }
if(currency != NULL) {
        delete currency;
    }
}

SWGCityInformation*
SWGCityInformation::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCityInformation::fromJsonObject(QJsonObject &pJson) {
    setValue(&code, pJson["code"], "QString", "QString");
setValue(&geonames_ID, pJson["geonames_ID"], "QString", "QString");
setValue(&name, pJson["name"], "QString", "QString");
setValue(&state, pJson["state"], "QString", "QString");
setValue(&country, pJson["country"], "QString", "QString");
setValue(&location, pJson["location"], "SWGGeolocation", "SWGGeolocation");
setValue(&timezone, pJson["timezone"], "QString", "QString");
setValue(&currency, pJson["currency"], "QString", "QString");
}

QString
SWGCityInformation::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGCityInformation::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("code"), code, obj, QString("QString"));
    
        

    
    toJsonValue(QString("geonames_ID"), geonames_ID, obj, QString("QString"));
    
        

    
    toJsonValue(QString("name"), name, obj, QString("QString"));
    
        

    
    toJsonValue(QString("state"), state, obj, QString("QString"));
    
        

    
    toJsonValue(QString("country"), country, obj, QString("QString"));
    
        

    
    toJsonValue(QString("location"), location, obj, QString("SWGGeolocation"));
    
        

    
    toJsonValue(QString("timezone"), timezone, obj, QString("QString"));
    
        

    
    toJsonValue(QString("currency"), currency, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGCityInformation::getCode() {
    return code;
}
void
SWGCityInformation::setCode(QString* code) {
    this->code = code;
}

QString*
SWGCityInformation::getGeonamesID() {
    return geonames_ID;
}
void
SWGCityInformation::setGeonamesID(QString* geonames_ID) {
    this->geonames_ID = geonames_ID;
}

QString*
SWGCityInformation::getName() {
    return name;
}
void
SWGCityInformation::setName(QString* name) {
    this->name = name;
}

QString*
SWGCityInformation::getState() {
    return state;
}
void
SWGCityInformation::setState(QString* state) {
    this->state = state;
}

QString*
SWGCityInformation::getCountry() {
    return country;
}
void
SWGCityInformation::setCountry(QString* country) {
    this->country = country;
}

SWGGeolocation*
SWGCityInformation::getLocation() {
    return location;
}
void
SWGCityInformation::setLocation(SWGGeolocation* location) {
    this->location = location;
}

QString*
SWGCityInformation::getTimezone() {
    return timezone;
}
void
SWGCityInformation::setTimezone(QString* timezone) {
    this->timezone = timezone;
}

QString*
SWGCityInformation::getCurrency() {
    return currency;
}
void
SWGCityInformation::setCurrency(QString* currency) {
    this->currency = currency;
}



} /* namespace Swagger */

