/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGTravelRecordResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGTravelRecordResponse::SWGTravelRecordResponse(QString* json) {
    init();
    this->fromJson(*json);
}

SWGTravelRecordResponse::SWGTravelRecordResponse() {
    init();
}

SWGTravelRecordResponse::~SWGTravelRecordResponse() {
    this->cleanup();
}

void
SWGTravelRecordResponse::init() {
    record_locator = new QString("");
header = new SWGTravelRecordHeader();
messages = new QList<SWGMessage*>();
travelers = new QList<SWGTraveler*>();
reservation = new SWGReservation();
}

void
SWGTravelRecordResponse::cleanup() {
    if(record_locator != NULL) {
        delete record_locator;
    }
if(header != NULL) {
        delete header;
    }
if(messages != NULL) {
        QList<SWGMessage*>* arr = messages;
        foreach(SWGMessage* o, *arr) {
            delete o;
        }
        delete messages;
    }
if(travelers != NULL) {
        QList<SWGTraveler*>* arr = travelers;
        foreach(SWGTraveler* o, *arr) {
            delete o;
        }
        delete travelers;
    }
if(reservation != NULL) {
        delete reservation;
    }
}

SWGTravelRecordResponse*
SWGTravelRecordResponse::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTravelRecordResponse::fromJsonObject(QJsonObject &pJson) {
    setValue(&record_locator, pJson["record_locator"], "QString", "QString");
setValue(&header, pJson["header"], "SWGTravelRecordHeader", "SWGTravelRecordHeader");
setValue(&messages, pJson["messages"], "QList", "SWGMessage");
setValue(&travelers, pJson["travelers"], "QList", "SWGTraveler");
setValue(&reservation, pJson["reservation"], "SWGReservation", "SWGReservation");
}

QString
SWGTravelRecordResponse::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGTravelRecordResponse::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("record_locator"), record_locator, obj, QString("QString"));
    
        

    
    toJsonValue(QString("header"), header, obj, QString("SWGTravelRecordHeader"));
    
        

    
    QList<SWGMessage*>* messagesList = messages;
    QJsonArray messagesJsonArray;
    toJsonArray((QList<void*>*)messages, &messagesJsonArray, "messages", "SWGMessage");

    obj->insert("messages", messagesJsonArray);
    

    
    QList<SWGTraveler*>* travelersList = travelers;
    QJsonArray travelersJsonArray;
    toJsonArray((QList<void*>*)travelers, &travelersJsonArray, "travelers", "SWGTraveler");

    obj->insert("travelers", travelersJsonArray);
    

    
    toJsonValue(QString("reservation"), reservation, obj, QString("SWGReservation"));
    
        

    return obj;
}

QString*
SWGTravelRecordResponse::getRecordLocator() {
    return record_locator;
}
void
SWGTravelRecordResponse::setRecordLocator(QString* record_locator) {
    this->record_locator = record_locator;
}

SWGTravelRecordHeader*
SWGTravelRecordResponse::getHeader() {
    return header;
}
void
SWGTravelRecordResponse::setHeader(SWGTravelRecordHeader* header) {
    this->header = header;
}

QList<SWGMessage*>*
SWGTravelRecordResponse::getMessages() {
    return messages;
}
void
SWGTravelRecordResponse::setMessages(QList<SWGMessage*>* messages) {
    this->messages = messages;
}

QList<SWGTraveler*>*
SWGTravelRecordResponse::getTravelers() {
    return travelers;
}
void
SWGTravelRecordResponse::setTravelers(QList<SWGTraveler*>* travelers) {
    this->travelers = travelers;
}

SWGReservation*
SWGTravelRecordResponse::getReservation() {
    return reservation;
}
void
SWGTravelRecordResponse::setReservation(SWGReservation* reservation) {
    this->reservation = reservation;
}



} /* namespace Swagger */

