/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGImage.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGImage::SWGImage(QString* json) {
    init();
    this->fromJson(*json);
}

SWGImage::SWGImage() {
    init();
}

SWGImage::~SWGImage() {
    this->cleanup();
}

void
SWGImage::init() {
    category = new QString("");
width = NULL;
height = NULL;
url = new QString("");
}

void
SWGImage::cleanup() {
    if(category != NULL) {
        delete category;
    }


if(url != NULL) {
        delete url;
    }
}

SWGImage*
SWGImage::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGImage::fromJsonObject(QJsonObject &pJson) {
    setValue(&category, pJson["category"], "QString", "QString");
setValue(&width, pJson["width"], "qint32", "");
setValue(&height, pJson["height"], "qint32", "");
setValue(&url, pJson["url"], "QString", "QString");
}

QString
SWGImage::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGImage::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("category"), category, obj, QString("QString"));
    
        
obj->insert("width", QJsonValue(width));
obj->insert("height", QJsonValue(height));

    
    toJsonValue(QString("url"), url, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGImage::getCategory() {
    return category;
}
void
SWGImage::setCategory(QString* category) {
    this->category = category;
}

qint32
SWGImage::getWidth() {
    return width;
}
void
SWGImage::setWidth(qint32 width) {
    this->width = width;
}

qint32
SWGImage::getHeight() {
    return height;
}
void
SWGImage::setHeight(qint32 height) {
    this->height = height;
}

QString*
SWGImage::getUrl() {
    return url;
}
void
SWGImage::setUrl(QString* url) {
    this->url = url;
}



} /* namespace Swagger */

