/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGDefaultApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGDefaultApi::SWGDefaultApi() {}

SWGDefaultApi::~SWGDefaultApi() {}

SWGDefaultApi::SWGDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDefaultApi::airport Autocomplete(QString* apikey, QString* term, QString* country, bool allAirports) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/airports/autocomplete");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("term"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(term)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("country"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(country)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allAirports"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allAirports)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::airport AutocompleteCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::airport AutocompleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGAirportAutocompleteResponse*>* output = new QList<SWGAirportAutocompleteResponse*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGAirportAutocompleteResponse* o = new SWGAirportAutocompleteResponse();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit airport AutocompleteSignal(output);
    
}
void
SWGDefaultApi::car Rental Airport Search(QString* apikey, QString* location, QString* pickUp, QString* dropOff, QString* lang, QString* currency, QString* provider, QString* rateClass, QString* ratePlan, QString* rateFilter, QList<QString*>* vehicle) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/cars/search-airport");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("location"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(location)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pickUp"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pickUp)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("dropOff"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(dropOff)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("provider"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(provider)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rateClass"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(rateClass)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ratePlan"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(ratePlan)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rateFilter"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(rateFilter)));



    if (vehicle->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *vehicle) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("vehicle=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("vehicle=");
        qint32 count = 0;
        foreach(QString* t, *vehicle) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("vehicle=");
        qint32 count = 0;
        foreach(QString* t, *vehicle) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::car Rental Airport SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::car Rental Airport SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCarSearchResponse* output = static_cast<SWGCarSearchResponse*>(create(json, QString("SWGCarSearchResponse")));
    

    worker->deleteLater();

    emit car Rental Airport SearchSignal(output);
    
}
void
SWGDefaultApi::car Rental Geosearch(QString* apikey, SWGNumber* latitude, SWGNumber* longitude, qint32 radius, QString* pickUp, QString* dropOff, QString* lang, QString* currency, QString* provider, QString* rateClass, QString* ratePlan, QString* rateFilter, QList<QString*>* vehicle) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/cars/search-circle");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("latitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(latitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("longitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(longitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radius"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(radius)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pickUp"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pickUp)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("dropOff"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(dropOff)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("provider"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(provider)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rateClass"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(rateClass)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ratePlan"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(ratePlan)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rateFilter"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(rateFilter)));



    if (vehicle->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *vehicle) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("vehicle=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("vehicle=");
        qint32 count = 0;
        foreach(QString* t, *vehicle) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("vehicle=");
        qint32 count = 0;
        foreach(QString* t, *vehicle) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::car Rental GeosearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::car Rental GeosearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCarSearchResponse* output = static_cast<SWGCarSearchResponse*>(create(json, QString("SWGCarSearchResponse")));
    

    worker->deleteLater();

    emit car Rental GeosearchSignal(output);
    
}
void
SWGDefaultApi::flight Affiliate Search(QString* apikey, QString* origin, QString* destination, QString* departureDate, QString* returnDate, qint32 adults, qint32 children, qint32 infants, QList<QString*>* includeMerchants, QList<QString*>* excludeMerchants, qint32 maxPrice, QString* currency, bool mobile) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/flights/affiliate-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("returnDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(returnDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("adults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(adults)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("children"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(children)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("infants"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(infants)));



    if (includeMerchants->size() > 0) {
      if (QString("csv").indexOf("multi") == 0) {
        foreach(QString* t, *includeMerchants) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("includeMerchants=").append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("includeMerchants=");
        qint32 count = 0;
        foreach(QString* t, *includeMerchants) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("includeMerchants=");
        qint32 count = 0;
        foreach(QString* t, *includeMerchants) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }



    if (excludeMerchants->size() > 0) {
      if (QString("csv").indexOf("multi") == 0) {
        foreach(QString* t, *excludeMerchants) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("excludeMerchants=").append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("excludeMerchants=");
        qint32 count = 0;
        foreach(QString* t, *excludeMerchants) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("excludeMerchants=");
        qint32 count = 0;
        foreach(QString* t, *excludeMerchants) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxPrice)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("mobile"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(mobile)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::flight Affiliate SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::flight Affiliate SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAffiliateSearchResponse* output = static_cast<SWGAffiliateSearchResponse*>(create(json, QString("SWGAffiliateSearchResponse")));
    

    worker->deleteLater();

    emit flight Affiliate SearchSignal(output);
    
}
void
SWGDefaultApi::flight Extensive Search(QString* apikey, QString* origin, QString* destination, QString* departureDate, bool oneWay, QString* duration, bool direct, QString* maxPrice, QString* aggregationMode) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/flights/extensive-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("oneWay"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(oneWay)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("duration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(duration)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("direct"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(direct)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxPrice)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("aggregationMode"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(aggregationMode)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::flight Extensive SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::flight Extensive SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGExtremeSearchResponse* output = static_cast<SWGExtremeSearchResponse*>(create(json, QString("SWGExtremeSearchResponse")));
    

    worker->deleteLater();

    emit flight Extensive SearchSignal(output);
    
}
void
SWGDefaultApi::flight Inspiration Search(QString* apikey, QString* origin, QString* destination, QString* departureDate, bool oneWay, QString* duration, bool direct, QString* maxPrice, QString* aggregationMode) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/flights/inspiration-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("oneWay"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(oneWay)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("duration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(duration)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("direct"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(direct)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxPrice)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("aggregationMode"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(aggregationMode)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::flight Inspiration SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::flight Inspiration SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGExtremeSearchResponse* output = static_cast<SWGExtremeSearchResponse*>(create(json, QString("SWGExtremeSearchResponse")));
    

    worker->deleteLater();

    emit flight Inspiration SearchSignal(output);
    
}
void
SWGDefaultApi::flight LowFare Search(QString* apikey, QString* origin, QString* destination, QString* departureDate, QString* returnDate, QString* arriveBy, QString* returnBy, qint32 adults, qint32 children, qint32 infants, QList<QString*>* includeAirlines, QList<QString*>* excludeAirlines, bool nonstop, qint32 maxPrice, QString* currency, QString* travelClass, qint32 numberOfResults) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/flights/low-fare-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("returnDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(returnDate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("arriveBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(arriveBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("returnBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(returnBy)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("adults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(adults)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("children"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(children)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("infants"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(infants)));



    if (includeAirlines->size() > 0) {
      if (QString("csv").indexOf("multi") == 0) {
        foreach(QString* t, *includeAirlines) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("includeAirlines=").append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("includeAirlines=");
        qint32 count = 0;
        foreach(QString* t, *includeAirlines) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("includeAirlines=");
        qint32 count = 0;
        foreach(QString* t, *includeAirlines) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }



    if (excludeAirlines->size() > 0) {
      if (QString("csv").indexOf("multi") == 0) {
        foreach(QString* t, *excludeAirlines) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("excludeAirlines=").append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("excludeAirlines=");
        qint32 count = 0;
        foreach(QString* t, *excludeAirlines) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("excludeAirlines=");
        qint32 count = 0;
        foreach(QString* t, *excludeAirlines) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("nonstop"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(nonstop)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxPrice"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxPrice)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("travelClass"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(travelClass)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::flight LowFare SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::flight LowFare SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLowFareSearchResponse* output = static_cast<SWGLowFareSearchResponse*>(create(json, QString("SWGLowFareSearchResponse")));
    

    worker->deleteLater();

    emit flight LowFare SearchSignal(output);
    
}
void
SWGDefaultApi::flight Traffic API(QString* apikey, QString* period, QString* origin, QString* destination, qint32 numberOfResultsPerPeriod) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/travel-intelligence/flight-traffic");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("period"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(period)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResultsPerPeriod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResultsPerPeriod)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::flight Traffic APICallback);

    worker->execute(&input);
}

void
SWGDefaultApi::flight Traffic APICallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGFlightTrafficSearchResponse* output = static_cast<SWGFlightTrafficSearchResponse*>(create(json, QString("SWGFlightTrafficSearchResponse")));
    

    worker->deleteLater();

    emit flight Traffic APISignal(output);
    
}
void
SWGDefaultApi::hotel Airport Search(QString* apikey, QString* location, QString* checkIn, QString* checkOut, qint32 radius, QString* lang, QString* currency, QString* chain, SWGNumber* maxRate, qint32 numberOfResults, bool allRooms, bool showSoldOut, QList<QString*>* amenity) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/hotels/search-airport");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("location"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(location)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkIn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkIn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkOut)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radius"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(radius)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chain)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxRate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxRate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allRooms"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allRooms)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showSoldOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(showSoldOut)));



    if (amenity->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *amenity) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("amenity=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::hotel Airport SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::hotel Airport SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGHotelSearchResponse* output = static_cast<SWGHotelSearchResponse*>(create(json, QString("SWGHotelSearchResponse")));
    

    worker->deleteLater();

    emit hotel Airport SearchSignal(output);
    
}
void
SWGDefaultApi::hotel Geosearch by box(QString* apikey, QString* southWestCorner, QString* northEastCorner, QString* checkIn, QString* checkOut, QString* lang, QString* currency, QString* chain, SWGNumber* maxRate, qint32 numberOfResults, bool allRooms, bool showSoldOut, QList<QString*>* amenity) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/hotels/search-box");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("southWestCorner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(southWestCorner)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("northEastCorner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(northEastCorner)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkIn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkIn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkOut)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chain)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxRate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxRate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allRooms"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allRooms)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showSoldOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(showSoldOut)));



    if (amenity->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *amenity) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("amenity=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::hotel Geosearch by boxCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::hotel Geosearch by boxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGHotelSearchResponse* output = static_cast<SWGHotelSearchResponse*>(create(json, QString("SWGHotelSearchResponse")));
    

    worker->deleteLater();

    emit hotel Geosearch by boxSignal(output);
    
}
void
SWGDefaultApi::hotel Geosearch by circle(QString* apikey, SWGNumber* latitude, SWGNumber* longitude, qint32 radius, QString* checkIn, QString* checkOut, QString* lang, QString* currency, QString* chain, SWGNumber* maxRate, qint32 numberOfResults, bool allRooms, bool showSoldOut, QList<QString*>* amenity) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/hotels/search-circle");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("latitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(latitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("longitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(longitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radius"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(radius)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkIn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkIn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkOut)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chain)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxRate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(maxRate)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allRooms"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allRooms)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showSoldOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(showSoldOut)));



    if (amenity->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *amenity) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else 
            fullPath.append("?");
          fullPath.append("amenity=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else 
          fullPath.append("?");
        fullPath.append("amenity=");
        qint32 count = 0;
        foreach(QString* t, *amenity) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::hotel Geosearch by circleCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::hotel Geosearch by circleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGHotelSearchResponse* output = static_cast<SWGHotelSearchResponse*>(create(json, QString("SWGHotelSearchResponse")));
    

    worker->deleteLater();

    emit hotel Geosearch by circleSignal(output);
    
}
void
SWGDefaultApi::hotel Property Code Search(QString* apikey, QString* propertyCode, QString* checkIn, QString* checkOut, QString* lang, QString* currency, bool allRooms, bool showSoldOut) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/hotels/{property_code}");

    QString propertyCodePathParam("{"); propertyCodePathParam.append("propertyCode").append("}");
    fullPath.replace(propertyCodePathParam, stringValue(propertyCode));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkIn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkIn)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(checkOut)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allRooms"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allRooms)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showSoldOut"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(showSoldOut)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::hotel Property Code SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::hotel Property Code SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGHotelPropertyResponse* output = static_cast<SWGHotelPropertyResponse*>(create(json, QString("SWGHotelPropertyResponse")));
    

    worker->deleteLater();

    emit hotel Property Code SearchSignal(output);
    
}
void
SWGDefaultApi::location Information(QString* apikey, QString* code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/location/{code}");

    QString codePathParam("{"); codePathParam.append("code").append("}");
    fullPath.replace(codePathParam, stringValue(code));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::location InformationCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::location InformationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLocationResponse* output = static_cast<SWGLocationResponse*>(create(json, QString("SWGLocationResponse")));
    

    worker->deleteLater();

    emit location InformationSignal(output);
    
}
void
SWGDefaultApi::nearest Relevant Airport(QString* apikey, QString* latitude, QString* longitude) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/airports/nearest-relevant");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("latitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(latitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("longitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(longitude)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::nearest Relevant AirportCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::nearest Relevant AirportCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGNearestAirport*>* output = new QList<SWGNearestAirport*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGNearestAirport* o = new SWGNearestAirport();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit nearest Relevant AirportSignal(output);
    
}
void
SWGDefaultApi::railStation Autocomplete(QString* apikey, QString* term) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/rail-stations/autocomplete");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("term"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(term)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::railStation AutocompleteCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::railStation AutocompleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGRailStationAutocompleteResponse*>* output = new QList<SWGRailStationAutocompleteResponse*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGRailStationAutocompleteResponse* o = new SWGRailStationAutocompleteResponse();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit railStation AutocompleteSignal(output);
    
}
void
SWGDefaultApi::railStation Information(QString* apikey, QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/rail-station/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::railStation InformationCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::railStation InformationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGRailStationResponse* output = static_cast<SWGRailStationResponse*>(create(json, QString("SWGRailStationResponse")));
    

    worker->deleteLater();

    emit railStation InformationSignal(output);
    
}
void
SWGDefaultApi::top Flight Destinations(QString* apikey, QString* period, QString* origin, qint32 numberOfResults) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/travel-intelligence/top-destinations");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("period"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(period)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::top Flight DestinationsCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::top Flight DestinationsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTopDestinationsSearchResponse* output = static_cast<SWGTopDestinationsSearchResponse*>(create(json, QString("SWGTopDestinationsSearchResponse")));
    

    worker->deleteLater();

    emit top Flight DestinationsSignal(output);
    
}
void
SWGDefaultApi::top Flight Searches(QString* apikey, QString* period, QString* origin, QString* country, QString* destination, qint32 numberOfResults) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/travel-intelligence/top-searches");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("period"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(period)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("country"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(country)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::top Flight SearchesCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::top Flight SearchesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTopSearchesSearchResponse* output = static_cast<SWGTopSearchesSearchResponse*>(create(json, QString("SWGTopSearchesSearchResponse")));
    

    worker->deleteLater();

    emit top Flight SearchesSignal(output);
    
}
void
SWGDefaultApi::train Extensive Search(QString* apikey, QString* origin, QString* destination, QString* departureDate) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trains/extensive-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destination"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(destination)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::train Extensive SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::train Extensive SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGExtensiveTrainSearchResponse* output = static_cast<SWGExtensiveTrainSearchResponse*>(create(json, QString("SWGExtensiveTrainSearchResponse")));
    

    worker->deleteLater();

    emit train Extensive SearchSignal(output);
    
}
void
SWGDefaultApi::train Schedule Search(QString* apikey, QString* origin, QDate* departureDate) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trains/schedule-search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("origin"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(origin)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("departureDate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(departureDate)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::train Schedule SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::train Schedule SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTrainScheduleSearchResponse* output = static_cast<SWGTrainScheduleSearchResponse*>(create(json, QString("SWGTrainScheduleSearchResponse")));
    

    worker->deleteLater();

    emit train Schedule SearchSignal(output);
    
}
void
SWGDefaultApi::travel Record Retrieve(QString* apikey, QString* recordLocator, QString* lastName, QString* env) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/travel-record/{record_locator}");

    QString recordLocatorPathParam("{"); recordLocatorPathParam.append("recordLocator").append("}");
    fullPath.replace(recordLocatorPathParam, stringValue(recordLocator));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lastName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lastName)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("env"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(env)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::travel Record RetrieveCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::travel Record RetrieveCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTravelRecordResponse* output = static_cast<SWGTravelRecordResponse*>(create(json, QString("SWGTravelRecordResponse")));
    

    worker->deleteLater();

    emit travel Record RetrieveSignal(output);
    
}
void
SWGDefaultApi::yapQ City Name Search(QString* apikey, QString* cityName, QString* lang, QString* category, bool geonames, bool vibes, bool socialMedia, QString* imageSize, qint32 numberOfImages, qint32 numberOfResults) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/points-of-interest/yapq-search-text");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cityName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cityName)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("geonames"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(geonames)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("vibes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(vibes)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("socialMedia"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(socialMedia)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("imageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(imageSize)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfImages"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfImages)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::yapQ City Name SearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::yapQ City Name SearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPointsOfInterestResponse* output = static_cast<SWGPointsOfInterestResponse*>(create(json, QString("SWGPointsOfInterestResponse")));
    

    worker->deleteLater();

    emit yapQ City Name SearchSignal(output);
    
}
void
SWGDefaultApi::yapQ Geosearch(QString* apikey, SWGNumber* latitude, SWGNumber* longitude, qint32 radius, QString* lang, QString* category, bool geonames, bool vibes, bool socialMedia, QString* imageSize, qint32 numberOfImages, qint32 numberOfResults) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/points-of-interest/yapq-search-circle");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apikey"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apikey)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("latitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(latitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("longitude"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(longitude)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radius"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(radius)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lang"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lang)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("geonames"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(geonames)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("vibes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(vibes)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("socialMedia"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(socialMedia)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("imageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(imageSize)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfImages"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfImages)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("numberOfResults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(numberOfResults)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::yapQ GeosearchCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::yapQ GeosearchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPointsOfInterestResponse* output = static_cast<SWGPointsOfInterestResponse*>(create(json, QString("SWGPointsOfInterestResponse")));
    

    worker->deleteLater();

    emit yapQ GeosearchSignal(output);
    
}
} /* namespace Swagger */
