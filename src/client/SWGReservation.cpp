/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGReservation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGReservation::SWGReservation(QString* json) {
    init();
    this->fromJson(*json);
}

SWGReservation::SWGReservation() {
    init();
}

SWGReservation::~SWGReservation() {
    this->cleanup();
}

void
SWGReservation::init() {
    flight_tickets = new SWGFlightTicket();
unticketed_flights = new QList<SWGFlightReservationBound*>();
cars = new QList<SWGCarReservation*>();
hotels = new QList<SWGHotelReservation*>();
others = new QList<SWGOtherReservation*>();
}

void
SWGReservation::cleanup() {
    if(flight_tickets != NULL) {
        delete flight_tickets;
    }
if(unticketed_flights != NULL) {
        QList<SWGFlightReservationBound*>* arr = unticketed_flights;
        foreach(SWGFlightReservationBound* o, *arr) {
            delete o;
        }
        delete unticketed_flights;
    }
if(cars != NULL) {
        QList<SWGCarReservation*>* arr = cars;
        foreach(SWGCarReservation* o, *arr) {
            delete o;
        }
        delete cars;
    }
if(hotels != NULL) {
        QList<SWGHotelReservation*>* arr = hotels;
        foreach(SWGHotelReservation* o, *arr) {
            delete o;
        }
        delete hotels;
    }
if(others != NULL) {
        QList<SWGOtherReservation*>* arr = others;
        foreach(SWGOtherReservation* o, *arr) {
            delete o;
        }
        delete others;
    }
}

SWGReservation*
SWGReservation::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGReservation::fromJsonObject(QJsonObject &pJson) {
    setValue(&flight_tickets, pJson["flight_tickets"], "SWGFlightTicket", "SWGFlightTicket");
setValue(&unticketed_flights, pJson["unticketed_flights"], "QList", "SWGFlightReservationBound");
setValue(&cars, pJson["cars"], "QList", "SWGCarReservation");
setValue(&hotels, pJson["hotels"], "QList", "SWGHotelReservation");
setValue(&others, pJson["others"], "QList", "SWGOtherReservation");
}

QString
SWGReservation::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGReservation::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("flight_tickets"), flight_tickets, obj, QString("SWGFlightTicket"));
    
        

    
    QList<SWGFlightReservationBound*>* unticketed_flightsList = unticketed_flights;
    QJsonArray unticketed_flightsJsonArray;
    toJsonArray((QList<void*>*)unticketed_flights, &unticketed_flightsJsonArray, "unticketed_flights", "SWGFlightReservationBound");

    obj->insert("unticketed_flights", unticketed_flightsJsonArray);
    

    
    QList<SWGCarReservation*>* carsList = cars;
    QJsonArray carsJsonArray;
    toJsonArray((QList<void*>*)cars, &carsJsonArray, "cars", "SWGCarReservation");

    obj->insert("cars", carsJsonArray);
    

    
    QList<SWGHotelReservation*>* hotelsList = hotels;
    QJsonArray hotelsJsonArray;
    toJsonArray((QList<void*>*)hotels, &hotelsJsonArray, "hotels", "SWGHotelReservation");

    obj->insert("hotels", hotelsJsonArray);
    

    
    QList<SWGOtherReservation*>* othersList = others;
    QJsonArray othersJsonArray;
    toJsonArray((QList<void*>*)others, &othersJsonArray, "others", "SWGOtherReservation");

    obj->insert("others", othersJsonArray);
    

    return obj;
}

SWGFlightTicket*
SWGReservation::getFlightTickets() {
    return flight_tickets;
}
void
SWGReservation::setFlightTickets(SWGFlightTicket* flight_tickets) {
    this->flight_tickets = flight_tickets;
}

QList<SWGFlightReservationBound*>*
SWGReservation::getUnticketedFlights() {
    return unticketed_flights;
}
void
SWGReservation::setUnticketedFlights(QList<SWGFlightReservationBound*>* unticketed_flights) {
    this->unticketed_flights = unticketed_flights;
}

QList<SWGCarReservation*>*
SWGReservation::getCars() {
    return cars;
}
void
SWGReservation::setCars(QList<SWGCarReservation*>* cars) {
    this->cars = cars;
}

QList<SWGHotelReservation*>*
SWGReservation::getHotels() {
    return hotels;
}
void
SWGReservation::setHotels(QList<SWGHotelReservation*>* hotels) {
    this->hotels = hotels;
}

QList<SWGOtherReservation*>*
SWGReservation::getOthers() {
    return others;
}
void
SWGReservation::setOthers(QList<SWGOtherReservation*>* others) {
    this->others = others;
}



} /* namespace Swagger */

