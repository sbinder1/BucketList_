/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGExtensiveTrainSearchResult.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGExtensiveTrainSearchResult::SWGExtensiveTrainSearchResult(QString* json) {
    init();
    this->fromJson(*json);
}

SWGExtensiveTrainSearchResult::SWGExtensiveTrainSearchResult() {
    init();
}

SWGExtensiveTrainSearchResult::~SWGExtensiveTrainSearchResult() {
    this->cleanup();
}

void
SWGExtensiveTrainSearchResult::init() {
    origin = new SWGStation();
destination = new SWGStation();
itineraries = new QList<SWGTrainSearchItinerary*>();
}

void
SWGExtensiveTrainSearchResult::cleanup() {
    if(origin != NULL) {
        delete origin;
    }
if(destination != NULL) {
        delete destination;
    }
if(itineraries != NULL) {
        QList<SWGTrainSearchItinerary*>* arr = itineraries;
        foreach(SWGTrainSearchItinerary* o, *arr) {
            delete o;
        }
        delete itineraries;
    }
}

SWGExtensiveTrainSearchResult*
SWGExtensiveTrainSearchResult::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGExtensiveTrainSearchResult::fromJsonObject(QJsonObject &pJson) {
    setValue(&origin, pJson["origin"], "SWGStation", "SWGStation");
setValue(&destination, pJson["destination"], "SWGStation", "SWGStation");
setValue(&itineraries, pJson["itineraries"], "QList", "SWGTrainSearchItinerary");
}

QString
SWGExtensiveTrainSearchResult::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGExtensiveTrainSearchResult::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("origin"), origin, obj, QString("SWGStation"));
    
        

    
    toJsonValue(QString("destination"), destination, obj, QString("SWGStation"));
    
        

    
    QList<SWGTrainSearchItinerary*>* itinerariesList = itineraries;
    QJsonArray itinerariesJsonArray;
    toJsonArray((QList<void*>*)itineraries, &itinerariesJsonArray, "itineraries", "SWGTrainSearchItinerary");

    obj->insert("itineraries", itinerariesJsonArray);
    

    return obj;
}

SWGStation*
SWGExtensiveTrainSearchResult::getOrigin() {
    return origin;
}
void
SWGExtensiveTrainSearchResult::setOrigin(SWGStation* origin) {
    this->origin = origin;
}

SWGStation*
SWGExtensiveTrainSearchResult::getDestination() {
    return destination;
}
void
SWGExtensiveTrainSearchResult::setDestination(SWGStation* destination) {
    this->destination = destination;
}

QList<SWGTrainSearchItinerary*>*
SWGExtensiveTrainSearchResult::getItineraries() {
    return itineraries;
}
void
SWGExtensiveTrainSearchResult::setItineraries(QList<SWGTrainSearchItinerary*>* itineraries) {
    this->itineraries = itineraries;
}



} /* namespace Swagger */

